{"version":3,"sources":["components/InfoCard.js","components/LineChart.js","components/LineChartVaccine.js","components/CountryTable.js","components/CountryVaccineTable.js","components/CustomPopup.js","components/MapContainer.js","utils/util.js","App.js","serviceWorker.js","index.js"],"names":["InfoCard","title","cases","total","active","caseType","props","Card","onClick","className","Body","Title","Text","Footer","options","plugins","legend","display","elements","point","radius","maintainAspectRatio","tooltips","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineChart","useState","setData","useEffect","a","fetch","then","response","json","fetchData","length","datasets","backgroundColor","borderColor","fill","timeline","LineChartVaccine","selectedCountryCode","CountryTable","countries","map","country","CountryVaccineTable","casesTypeColors","hex","multiplier","recovered","deaths","showDataOnMap","Circle","center","countryInfo","lat","long","color","fillColor","fillOpacity","Math","sqrt","stroke","Popup","style","backgroundImage","flag","MapContainer","zoom","Map","scrollWheelZoom","TileLayer","attribution","url","sortData","sortedData","sort","b","sortDataVaccine","prettyPrintStat","stat","App","selectedCountry","setSelectedCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","tableVaccine","setTableVaccine","name","iso2","getCountriesData","sortedDataV","onCountryChange","e","countryCode","target","Form","Control","as","onChange","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2196858a.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Card} from 'react-bootstrap';\n\nimport './InfoCard.css';\n\nfunction InfoCard({title, cases, total, active, caseType, ...props}) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoCard ${active && 'infoCard--selected'} \n      ${caseType === 'cases' && 'infoCard--cases'}\n      ${caseType === 'recovered' && 'infoCard--recovered'}\n      ${caseType === 'deaths' && 'infoCard--deaths'} `}>\n      <Card.Body>\n        <Card.Title>{title}</Card.Title>\n        <Card.Text>\n          <h2\n            className={`infoCardCases ${\n              caseType === 'recovered' && 'infoCardCases--green'\n            }`}>\n            {cases}\n          </h2>\n        </Card.Text>\n        <Card.Footer className=\"infoCardTotal\">{total} Total</Card.Footer>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default InfoCard;\n","import React, {useState, useEffect} from 'react';\n\nimport {Line} from 'react-chartjs-2';\nimport numeral from 'numeral';\n\nimport './LineChart.css';\n\nconst options = {\n  plugins: {\n    legend: {\n      display: false,\n    },\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format('+0,0');\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: 'time',\n        time: {\n          format: 'MM/DD/YY',\n          tooltipFormat: 'll',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format('0a');\n          },\n        },\n      },\n    ],\n  },\n  title: {\n    display: false,\n  },\n};\n\n// FIX: The method currently only works with cases,\n// but it should also work with deaths and recovered.\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineChart({casesType}) {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          className=\"lineChart\"\n          data={{\n            datasets: [\n              {\n                backgroundColor: 'rgba(75,192,192,0.2)',\n                borderColor: 'rgba(75,192,192,1)',\n                fill: true,\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineChart;\n","import React, {useState, useEffect} from 'react';\n\nimport {Line} from 'react-chartjs-2';\nimport numeral from 'numeral';\n\nimport './LineChart.css';\n\nconst options = {\n  plugins: {\n    legend: {\n      display: false,\n    },\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format('+0,0');\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: 'time',\n        time: {\n          format: 'MM/DD/YY',\n          tooltipFormat: 'll',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format('0a');\n          },\n        },\n      },\n    ],\n  },\n  title: {\n    display: false,\n  },\n};\n\nconst buildChartData = (data) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.timeline) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data['timeline'][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data['timeline'][date];\n  }\n  return chartData;\n};\n\nfunction LineChartVaccine({selectedCountryCode}) {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\n        `https://disease.sh/v3/covid-19/vaccine/coverage/countries/${selectedCountryCode}?lastdays=120`\n      )\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [selectedCountryCode]);\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line\n          className=\"lineChart\"\n          data={{\n            datasets: [\n              {\n                backgroundColor: 'rgba(75,192,192,0.2)',\n                borderColor: 'rgba(75,192,192,1)',\n                fill: true,\n                data: data,\n              },\n            ],\n          }}\n          options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineChartVaccine;\n","import React from 'react';\n\nimport numeral from 'numeral';\n\nimport './CountryTable.css';\n\nfunction CountryTable({title, countries}) {\n  return (\n    <div className=\"tableContainer\">\n      <h3 className=\"tableHeader\">{title}</h3>\n      <div className=\"table\">\n        {countries.map((country) => (\n          <tr>\n            <td>{country.country}</td>\n            <td>\n              <strong>{numeral(country.cases).format('0,0')}</strong>\n            </td>\n          </tr>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default CountryTable;\n","import React from 'react';\n\nimport numeral from 'numeral';\n\nimport './CountryTable.css';\n\nfunction CountryVaccineTable({title, countries}) {\n  return (\n    <div className=\"tableContainer\">\n      <h3 className=\"tableHeader\">{title}</h3>\n      <div className=\"table\">\n        {countries.map((country) => (\n          <tr>\n            <td>{country.country}</td>\n            <td>\n              <strong>{numeral(country.timeline[0].total).format('0,0')}</strong>\n            </td>\n          </tr>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default CountryVaccineTable;\n","import React from 'react';\n\nimport numeral from 'numeral';\nimport {Circle, Popup} from 'react-leaflet';\n\nimport './CustomPopup.css';\n\n// naranja\n// verde\n// rojo\nconst casesTypeColors = {\n  cases: {\n    hex: '#0000FF',\n    multiplier: 400,\n  },\n  recovered: {\n    hex: '#008000',\n    multiplier: 600,\n  },\n  deaths: {\n    hex: '#CC1034',\n    multiplier: 1000,\n  },\n};\n\nexport const showDataOnMap = (data, casesType = 'cases') =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.2}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n      stroke={false}>\n      <Popup>\n        <div className=\"infoContainer\">\n          <div className=\"infoName\">{country.country}</div>\n          <div\n            className=\"infoFlag\"\n            style={{backgroundImage: `url(${country.countryInfo.flag})`}}></div>\n          <div className=\"infoConfirmed\">\n            Cases: {numeral(country.cases).format('0,0')}\n          </div>\n          <div className=\"infoRecovered\">\n            Recovered: {numeral(country.recovered).format('0,0')}\n          </div>\n          <div className=\"infoDeaths\">\n            Deaths: {numeral(country.deaths).format('0,0')}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from 'react';\n\nimport {Map, TileLayer} from 'react-leaflet';\n\nimport {showDataOnMap} from './CustomPopup';\nimport './MapContainer.css';\n\nfunction MapContainer({countries, casesType, center, zoom}) {\n  return (\n    <div className=\"mapContainer\">\n      <Map center={center} zoom={zoom} scrollWheelZoom={true}>\n        <TileLayer          \n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {showDataOnMap(countries, casesType)}\n      </Map>\n    </div>\n  );\n}\n\nexport default MapContainer;","import numeral from 'numeral';\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const sortDataVaccine = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.timeline[0].total > b.timeline[0].total) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format('0.0a')}` : '+0';","import React, {useState, useEffect} from 'react';\n\nimport {Form, Card} from 'react-bootstrap';\nimport numeral from 'numeral';\nimport 'leaflet/dist/leaflet.css';\n\nimport InfoCard from './components/InfoCard';\nimport LineChart from './components/LineChart';\nimport LineChartVaccine from './components/LineChartVaccine';\nimport CountryTable from './components/CountryTable';\nimport CountryVaccineTable from './components/CountryVaccineTable';\nimport MapContainer from './components/MapContainer';\nimport {sortData, sortDataVaccine, prettyPrintStat} from './utils/util';\nimport './App.css';\n\nconst App = () => {\n  const [selectedCountry, setSelectedCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n  const [mapCenter, setMapCenter] = useState({lat: -0.27489, lng: -78.4676});\n  const [mapZoom, setMapZoom] = useState(5);\n  const [tableVaccine, setTableVaccine] = useState([]);\n\n  useEffect(() => {\n    fetch('https://disease.sh/v3/covid-19/all')\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch('https://disease.sh/v3/covid-19/countries')\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\n        'https://disease.sh/v3/covid-19/vaccine/coverage/countries?lastdays=1&fullData=true'\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          let sortedDataV = sortDataVaccine(data);\n          setTableVaccine(sortedDataV);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    const url =\n      countryCode === 'worldwide'\n        ? 'https://disease.sh/v3/covid-19/all'\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setSelectedCountry(countryCode);\n        setCountryInfo(data);\n        countryCode === 'worldwide'\n          ? setMapCenter({lat: -0.27489, lng: -78.4676})\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(5);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"appLeft\">\n        <div className=\"appHeader\">\n          <h1 className=\"header\">COVID-19 Global Cases</h1>\n          <Form.Control\n            as=\"select\"\n            value={selectedCountry}\n            onChange={onCountryChange}>\n            <option value=\"worldwide\">Worldwide</option>\n            {countries.map((country) => (\n              <option value={country.value}>{country.name}</option>\n            ))}\n          </Form.Control>\n        </div>\n        <div className=\"appStats\">\n          <InfoCard\n            onClick={(e) => setCasesType('cases')}\n            title=\"Today Confirmed Cases\"\n            active={casesType === 'cases'}\n            caseType=\"cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format('0.0a')}\n          />\n          <InfoCard\n            onClick={(e) => setCasesType('recovered')}\n            title=\"Today Recovered\"\n            caseType=\"recovered\"\n            active={casesType === 'recovered'}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format('0.0a')}\n          />\n          <InfoCard\n            onClick={(e) => setCasesType('deaths')}\n            title=\"Today Deaths\"\n            caseType=\"deaths\"\n            active={casesType === 'deaths'}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format('0.0a')}\n          />\n        </div>\n        <MapContainer\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card>\n        <Card.Body>\n          <div className=\"appInformation\">\n            <div className=\"appTables\">\n              <CountryTable\n                title=\"Confirmed Cases by Country\"\n                countries={tableData}\n              />\n              <CountryVaccineTable\n                title=\"Vaccines rolled out by Country\"\n                countries={tableVaccine}\n              />\n            </div>\n            <div className=\"appChart\">\n              <h3 className=\"lineChartName\">\n                Worldwide new {casesType} in last 4 months\n              </h3>\n              <LineChart title casesType={casesType} />\n              <br />\n              <h3 className=\"lineChartName\">\n                {selectedCountry === 'worldwide'\n                  ? 'Vaccines rolled out in Ecuador (default select) in last 4 months'\n                  : `Vaccines rolled out in ${selectedCountry} in last 4 months`}\n              </h3>\n              <LineChartVaccine\n                selectedCountryCode={\n                  selectedCountry === 'worldwide' ? 'EC' : selectedCountry\n                }\n              />\n            </div>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}