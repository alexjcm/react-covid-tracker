{"version":3,"sources":["components/InfoCard.js","api/covid19Api.js","components/LineChart.js","components/LineChartVaccine.js","components/CountryTable.js","components/CountryVaccineTable.js","components/CustomPopup.js","components/CustomMapContainer.js","utils/util.js","App.js","serviceWorker.js","index.js"],"names":["InfoCard","_ref","title","cases","total","active","caseType","props","_objectWithoutProperties","_excluded","_jsx","Card","onClick","className","concat","children","_jsxs","Body","Title","Text","Footer","COVID_API","url","ChartJS","register","CategoryScale","LinearScale","PointElement","LineElement","Tooltip","Legend","options","responsive","plugins","legend","display","elements","point","radius","maintainAspectRatio","tooltips","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","ticks","callback","index","values","buildChartData","casesType","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineChart","_useState","useState","_useState2","_slicedToArray","setData","useEffect","fetchData","_ref2","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_context","prev","next","fetch","then","response","json","stop","apply","arguments","allData","datasets","backgroundColor","borderColor","fill","length","Line","xxes","timeline","LineChartVaccine","selectedCountryCode","CountryTable","countries","map","country","CountryVaccineTable","casesTypeColors","hex","multiplier","recovered","deaths","showDataOnMap","undefined","Circle","center","countryInfo","lat","long","color","fillColor","fillOpacity","Math","sqrt","stroke","Popup","style","backgroundImage","flag","CustomMapContainer","zoom","Map","scrollWheelZoom","TileLayer","attribution","sortData","sortedData","_toConsumableArray","sort","a","b","sortDataVaccine","prettyPrintStat","stat","App","selectedCountry","setSelectedCountry","_useState3","_useState4","setCountryInfo","_useState5","_useState6","setCountries","_useState7","_useState8","mapCountries","setMapCountries","_useState9","_useState10","tableData","setTableData","_useState11","_useState12","setCasesType","_useState13","lng","_useState14","mapCenter","setMapCenter","_useState15","_useState16","mapZoom","setMapZoom","_useState17","_useState18","tableVaccine","setTableVaccine","getCountriesData","name","iso2","_callee2","_context2","sortedDataV","onCountryChange","_ref3","_callee3","e","countryCode","_context3","target","_x","Form","Control","as","onChange","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","React","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6dca6cf1.chunk.js","sourcesContent":["import React from 'react';\n\nimport {Card} from 'react-bootstrap';\n\nimport './InfoCard.css';\n\nfunction InfoCard({title, cases, total, active, caseType, ...props}) {\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoCard ${active && 'infoCard--selected'} \n      ${caseType === 'cases' && 'infoCard--cases'}\n      ${caseType === 'recovered' && 'infoCard--recovered'}\n      ${caseType === 'deaths' && 'infoCard--deaths'} `}>\n      <Card.Body>\n        <Card.Title>{title}</Card.Title>\n        <Card.Text>\n          <h2\n            className={`infoCardCases ${\n              caseType === 'recovered' && 'infoCardCases--green'\n            }`}>\n            {cases}\n          </h2>\n        </Card.Text>\n        <Card.Footer className=\"infoCardTotal\">{total} Total</Card.Footer>\n      </Card.Body>\n    </Card>\n  );\n}\n\nexport default InfoCard;\n","export const COVID_API = {\n  url: 'https://disease.sh/v3/covid-19',\n};\n","import React, { useState, useEffect } from 'react';\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\n\nimport numeral from 'numeral';\n\nimport './LineChart.css';\nimport { COVID_API } from '../api/covid19Api';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format('+0,0');\n      },\n    },\n  },\n  scales: {\n    xAxes: [\n      {\n        type: 'time',\n        time: {\n          format: 'MM/DD/YY',\n          tooltipFormat: 'll',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        ticks: {\n          // Include a dollar sign in the ticks\n          callback: function (value, index, values) {\n            return numeral(value).format('0a');\n          },\n        },\n      },\n    ],\n  },\n  title: {\n    display: false,\n  },\n};\n\n// FIX: The method currently only works with cases,\n// but it should also work with deaths and recovered.\nconst buildChartData = (data, casesType) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineChart({ casesType }) {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(`${COVID_API.url}/historical/all?lastdays=120`)\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  const allData = {\n    datasets: [\n      {\n        backgroundColor: 'rgba(75,192,192,0.2)',\n        borderColor: 'rgba(75,192,192,1)',\n        fill: true,\n        data: data,\n      },\n    ],\n  };\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line className=\"lineChart\" data={allData} options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineChart;\n","import React, { useState, useEffect } from 'react';\n\nimport {\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend,\n} from 'chart.js';\nimport { Line } from 'react-chartjs-2';\nimport numeral from 'numeral';\n\nimport './LineChart.css';\nimport { COVID_API } from '../api/covid19Api';\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  PointElement,\n  LineElement,\n  Title,\n  Tooltip,\n  Legend\n);\n\nconst options = {\n  responsive: true,\n  plugins: {\n    legend: {\n      display: false,\n    },\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n  },\n  maintainAspectRatio: false,\n  tooltips: {\n    callbacks: {\n      label: function (tooltipItem, data) {\n        return numeral(tooltipItem.value).format('+0,0');\n      },\n    },\n  },\n  scales: {\n    xxes: [\n      {\n        type: 'time',\n        time: {\n          format: 'MM/DD/YY',\n          tooltipFormat: 'll',\n        },\n      },\n    ],\n    yAxes: [\n      {\n        ticks: {\n          callback: function (value, index, values) {\n            return numeral(value).format('0a');\n          },\n        },\n      },\n    ],\n  },\n  title: {\n    display: false,\n  },\n};\n\nconst buildChartData = (data) => {\n  let chartData = [];\n  let lastDataPoint;\n  for (let date in data.timeline) {\n    if (lastDataPoint) {\n      let newDataPoint = {\n        x: date,\n        y: data['timeline'][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data['timeline'][date];\n  }\n  return chartData;\n};\n\nfunction LineChartVaccine({ selectedCountryCode }) {\n  const [data, setData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(\n        `${COVID_API.url}/vaccine/coverage/countries/${selectedCountryCode}?lastdays=120`\n      )\n        .then((response) => {\n          return response.json();\n        })\n        .then((data) => {\n          let chartData = buildChartData(data);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [selectedCountryCode]);\n\n  const allData = {\n    datasets: [\n      {\n        backgroundColor: 'rgba(75,192,192,0.2)',\n        borderColor: 'rgba(75,192,192,1)',\n        fill: true,\n        data: data,\n      },\n    ],\n  };\n\n  return (\n    <div>\n      {data?.length > 0 && (\n        <Line className=\"lineChart\" data={allData} options={options}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default LineChartVaccine;\n","import React from 'react';\n\nimport numeral from 'numeral';\n\nimport './CountryTable.css';\n\nfunction CountryTable({title, countries}) {\n  return (\n    <div className=\"tableContainer\">\n      <h3 className=\"tableHeader\">{title}</h3>\n      <div className=\"table\">\n        {countries.map((country) => (\n          <tr>\n            <td>{country.country}</td>\n            <td>\n              <strong>{numeral(country.cases).format('0,0')}</strong>\n            </td>\n          </tr>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default CountryTable;\n","import React from 'react';\n\nimport numeral from 'numeral';\n\nimport './CountryTable.css';\n\nfunction CountryVaccineTable({title, countries}) {\n  return (\n    <div className=\"tableContainer\">\n      <h3 className=\"tableHeader\">{title}</h3>\n      <div className=\"table\">\n        {countries.map((country) => (\n          <tr>\n            <td>{country.country}</td>\n            <td>\n              <strong>{numeral(country.timeline[0].total).format('0,0')}</strong>\n            </td>\n          </tr>\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default CountryVaccineTable;\n","import React from 'react';\n\nimport numeral from 'numeral';\nimport {Circle, Popup} from 'react-leaflet';\n\nimport './CustomPopup.css';\n\nconst casesTypeColors = {\n  cases: {\n    hex: '#0000FF',\n    multiplier: 400,\n  },\n  recovered: {\n    hex: '#008000',\n    multiplier: 600,\n  },\n  deaths: {\n    hex: '#CC1034',\n    multiplier: 1000,\n  },\n};\n\nexport const showDataOnMap = (data, casesType = 'cases') =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.2}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n      stroke={false}>\n      <Popup>\n        <div className=\"infoContainer\">\n          <div className=\"infoName\">{country.country}</div>\n          <div\n            className=\"infoFlag\"\n            style={{backgroundImage: `url(${country.countryInfo.flag})`}}></div>\n          <div className=\"infoConfirmed\">\n            Cases: {numeral(country.cases).format('0,0')}\n          </div>\n          <div className=\"infoRecovered\">\n            Recovered: {numeral(country.recovered).format('0,0')}\n          </div>\n          <div className=\"infoDeaths\">\n            Deaths: {numeral(country.deaths).format('0,0')}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from 'react';\n\nimport { Map, TileLayer } from 'react-leaflet';\n\nimport { showDataOnMap } from './CustomPopup';\nimport './CustomMapContainer.css';\n\nfunction CustomMapContainer({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"mapContainer\">\n      <Map center={center} zoom={zoom} scrollWheelZoom={true}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {showDataOnMap(countries, casesType)}\n      </Map>\n    </div>\n  );\n}\n\nexport default CustomMapContainer;","import numeral from 'numeral';\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const sortDataVaccine = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.timeline[0].total > b.timeline[0].total) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format('0.0a')}` : '+0';","import React, {useState, useEffect} from 'react';\n\nimport {Form, Card} from 'react-bootstrap';\nimport numeral from 'numeral';\nimport 'leaflet/dist/leaflet.css';\n\nimport InfoCard from './components/InfoCard';\nimport LineChart from './components/LineChart';\nimport LineChartVaccine from './components/LineChartVaccine';\nimport CountryTable from './components/CountryTable';\nimport CountryVaccineTable from './components/CountryVaccineTable';\nimport CustomMapContainer from './components/CustomMapContainer';\nimport {sortData, sortDataVaccine, prettyPrintStat} from './utils/util';\nimport './App.css';\nimport {COVID_API} from './api/covid19Api';\n\nconst App = () => {\n  const [selectedCountry, setSelectedCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState('cases');\n  const [mapCenter, setMapCenter] = useState({lat: -0.27489, lng: -78.4676});\n  const [mapZoom, setMapZoom] = useState(5);\n  const [tableVaccine, setTableVaccine] = useState([]);\n\n  useEffect(() => {\n    fetch(`${COVID_API.url}/all`)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(`${COVID_API.url}/countries`)\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\n        `${COVID_API.url}/vaccine/coverage/countries?lastdays=1&fullData=true`\n      )\n        .then((response) => response.json())\n        .then((data) => {\n          let sortedDataV = sortDataVaccine(data);\n          setTableVaccine(sortedDataV);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n    const url =\n      countryCode === 'worldwide'\n        ? `${COVID_API.url}/all`\n        : `${COVID_API.url}/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setSelectedCountry(countryCode);\n        setCountryInfo(data);\n        countryCode === 'worldwide'\n          ? setMapCenter({lat: -0.27489, lng: -78.4676})\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(5);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"appLeft\">\n        <div className=\"appHeader\">\n          <h1 className=\"header\">COVID-19 Global Cases</h1>\n          <Form.Control\n            as=\"select\"\n            value={selectedCountry}\n            onChange={onCountryChange}>\n            <option value=\"worldwide\">Worldwide</option>\n            {countries.map((country) => (\n              <option value={country.value}>{country.name}</option>\n            ))}\n          </Form.Control>\n        </div>\n        <div className=\"appStats\">\n          <InfoCard\n            onClick={(e) => setCasesType('cases')}\n            title=\"Today Confirmed Cases\"\n            active={casesType === 'cases'}\n            caseType=\"cases\"\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format('0.0a')}\n          />\n          <InfoCard\n            onClick={(e) => setCasesType('recovered')}\n            title=\"Today Recovered\"\n            caseType=\"recovered\"\n            active={casesType === 'recovered'}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format('0.0a')}\n          />\n          <InfoCard\n            onClick={(e) => setCasesType('deaths')}\n            title=\"Today Deaths\"\n            caseType=\"deaths\"\n            active={casesType === 'deaths'}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format('0.0a')}\n          />\n        </div>\n        <CustomMapContainer\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card>\n        <Card.Body>\n          <div className=\"appInformation\">\n            <div className=\"appTables\">\n              <CountryTable\n                title=\"Confirmed Cases by Country\"\n                countries={tableData}\n              />\n              <CountryVaccineTable\n                title=\"Vaccines rolled out by Country\"\n                countries={tableVaccine}\n              />\n            </div>\n            <div className=\"appChart\">\n              <h3 className=\"lineChartName\">\n                Worldwide new {casesType} in last 4 months\n              </h3>\n              <LineChart title casesType={casesType} />\n              <br />\n              <h3 className=\"lineChartName\">\n                {selectedCountry === 'worldwide'\n                  ? 'Vaccines rolled out in Ecuador (default select) in last 4 months'\n                  : `Vaccines rolled out in ${selectedCountry} in last 4 months`}\n              </h3>\n              <LineChartVaccine\n                selectedCountryCode={\n                  selectedCountry === 'worldwide' ? 'EC' : selectedCountry\n                }\n              />\n            </div>\n          </div>\n        </Card.Body>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}